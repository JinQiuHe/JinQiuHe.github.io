<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot下实现Scheduled定时任务个性化配置</title>
      <link href="/2022/03/28/SpringBoot%E4%B8%8B%E5%AE%9E%E7%8E%B0Scheduled%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/28/SpringBoot%E4%B8%8B%E5%AE%9E%E7%8E%B0Scheduled%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot下实现Scheduled定时任务个性化配置"><a href="#SpringBoot下实现Scheduled定时任务个性化配置" class="headerlink" title="SpringBoot下实现Scheduled定时任务个性化配置"></a>SpringBoot下实现Scheduled定时任务个性化配置</h2><h3 id="1、需求概述："><a href="#1、需求概述：" class="headerlink" title="1、需求概述："></a>1、需求概述：</h3><p>后台页面提供给用户可配置化的定时任务功能，用户可以新增、编辑、暂停、开启、删除定时任务。用户新增时输入的内容作为执行定时任务的条件，去数据库捞取数据。用户设置的时间为定时任务执行的时间，每新增一条信息即产生一条新的定时任务。</p><h3 id="2、简单分析："><a href="#2、简单分析：" class="headerlink" title="2、简单分析："></a>2、简单分析：</h3><p>a.用户新增定时任务，将执行条件、任务触发时间等信息保存到数据库；并开启该条定时任务；</p><p>b.用户修改定时任务，更新数据库，重新开启该条定时任务；</p><p>c.项目启动时，要扫描数据库定时任务信息，并将任务添加至定时任务组件中，开启它；</p><h3 id="3、技术点："><a href="#3、技术点：" class="headerlink" title="3、技术点："></a>3、技术点：</h3><p>一般我们都是从xml配置或者注解中读取定时任务配置，而现在需要用代码来实现它。定时任务可配置化就肯定要做持久层处理。</p><h3 id="4、代码实现："><a href="#4、代码实现：" class="headerlink" title="4、代码实现："></a>4、代码实现：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"></span><br><span class="line">public class ScheduleConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line">    private ThreadPoolTaskScheduler taskScheduler;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, ScheduledFuture&lt;?&gt;&gt; futureMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private String cron = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line">    * 取消定时任务</span><br><span class="line"></span><br><span class="line">    *</span><br><span class="line"></span><br><span class="line">    * @param id 任务id</span><br><span class="line"></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    public void cancelTimedTask(String id) &#123;</span><br><span class="line"></span><br><span class="line">        if (futureMap.get(id) != null) &#123;</span><br><span class="line"></span><br><span class="line">            //取消定时任务</span><br><span class="line"></span><br><span class="line">            futureMap.get(id).cancel(true);</span><br><span class="line"></span><br><span class="line">            futureMap.remove(id);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"></span><br><span class="line">    * 新建并开启定时任务</span><br><span class="line"></span><br><span class="line">    *</span><br><span class="line"></span><br><span class="line">    * @param id  定时任务唯一标识id</span><br><span class="line"></span><br><span class="line">    * @param cron 定时任务时间表达式</span><br><span class="line"></span><br><span class="line">    * @param task 定时任务task</span><br><span class="line"></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    public void startTimedTask(String id, String cron, Runnable task) &#123;</span><br><span class="line"></span><br><span class="line">        this.cron = cron;</span><br><span class="line"></span><br><span class="line">        ScheduledFuture&lt;?&gt; future = taskScheduler.schedule(task, new Trigger() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line"></span><br><span class="line">            public Date nextExecutionTime(TriggerContext triggerContext) &#123;</span><br><span class="line"></span><br><span class="line">                if (StringUtils.isEmpty(cron)) &#123;</span><br><span class="line"></span><br><span class="line">                    return null;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 定时任务触发，可修改定时任务的执行周期</span><br><span class="line"></span><br><span class="line">                CronTrigger trigger = new CronTrigger(cron);</span><br><span class="line"></span><br><span class="line">                Date nextExecDate = trigger.nextExecutionTime(triggerContext);</span><br><span class="line"></span><br><span class="line">                return nextExecDate;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        futureMap.put(id, future);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者这里ThreadPoolTaskScheduler 这个对象因为公司自己的jar包里已经初始化过了，所以直接注入使用了，不然需要初始化使用。</p><p>这个里面定时任务表达式cron和task任务类作为两个变量传进来，实现了定时任务可配置化的要求。futureMap 这个map对象用作存储开启定时任务后返回的future，因为后面取消定时任务会需要用到。</p><p>String cron, Runnable task两个参数：根据用户设定的执行时间，自己转换成cron表达式，并存入数据库中，具体的任务对象可以定义实现Runnable接口即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 报表模板可配置化任务</span><br><span class="line"> *</span><br><span class="line"> * @author : hejinqiu</span><br><span class="line"> * @date : 2019/3/18</span><br><span class="line"> */</span><br><span class="line">public class TemplateReportTask implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(TemplateReportTask.class);</span><br><span class="line"></span><br><span class="line">    private ReportService reportService;</span><br><span class="line"></span><br><span class="line">    private TemplateReport templateReport;</span><br><span class="line"></span><br><span class="line">    public TemplateReportTask(TemplateReport templateReport) &#123;</span><br><span class="line">        this.templateReport = templateReport;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        //TODO 具体的业务</span><br><span class="line">        System.out.println(templateReport.getTemplateId() + &quot;定时任务执行拉！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面这个是我的需求所自定义的任务类，run方法里写具体的业务代码 。<br>至此，定时任务的开启，取消功能其实就已经实现了，停止和取消是一样的。</p><p>再贴一下启动的代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TemplateReportTask templateReportTask = new TemplateReportTask(templateReport);</span><br><span class="line">scheduleConfig.startTimedTask(templateReport.getTemplateId(), templateReport.getCron(), templateReportTask);</span><br><span class="line">logger.info(templateReport.getTemplateId() + &quot;定时任务开启成功&quot;);</span><br></pre></td></tr></table></figure><p>task传你自己定义的任务类即可。</p><p>最后还差一个在项目启动的时候，需要去扫描数据库的定时任务配置信息，把符合要求的定时任务都开启即可。项目启动就执行某个方法，实现CommandLineRunner或者ApplicationRunner 接口即可。贴下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line"></span><br><span class="line">public class ReportRunner implements ApplicationRunner &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(ReportRunner.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line">    private ScheduleConfig scheduleConfig;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line"></span><br><span class="line">    private TemplateReportService templateReportService;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line"></span><br><span class="line">    public void run(ApplicationArguments args) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        // 项目启动加载所有报表配置 将定时任务添加至定时任务组件中</span><br><span class="line"></span><br><span class="line">        List&lt;TemplateReport&gt; reports = templateReportService.searchByStatus();</span><br><span class="line"></span><br><span class="line">        for (TemplateReport templateReport : reports) &#123;</span><br><span class="line"></span><br><span class="line">            scheduleConfig.startTimedTask(templateReport.getTemplateId(), templateReport.getCron(),</span><br><span class="line"></span><br><span class="line">                            new TemplateReportTask(templateReport));</span><br><span class="line"></span><br><span class="line">            logger.info(templateReport.getTemplateId() + &quot;定时任务开启成功&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面测试下，数据库存在两条定时任务信息，cron时间表达式暂设每5秒执行一次。</p><p><img src="/2022/03/28/SpringBoot下实现Scheduled定时任务个性化配置/16620010-39870fecf1f7b869.jpg" alt="任务id"></p><p><img src="/2022/03/28/SpringBoot下实现Scheduled定时任务个性化配置/16620010-e68e205062fa0fc0.jpg" alt="cron表达式"></p><p>启动项目，看下效果。</p><p><img src="/2022/03/28/SpringBoot下实现Scheduled定时任务个性化配置/16620010-2e4231f23794324d.jpg" alt="项目启动定时任务开启成功"></p><p><img src="/2022/03/28/SpringBoot下实现Scheduled定时任务个性化配置/16620010-95bc9b902cf17852.jpg" alt="5秒一次，两个定时任务都在执行"></p><p>至此，Scheduled定时任务可配置化的功能就顺利实现拉！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scheduled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信扫码登录（公众号发送消息）</title>
      <link href="/2022/03/25/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%EF%BC%88%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%EF%BC%89/"/>
      <url>/2022/03/25/%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%EF%BC%88%E5%85%AC%E4%BC%97%E5%8F%B7%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="微信扫码登录（公众号发送消息）"><a href="#微信扫码登录（公众号发送消息）" class="headerlink" title="微信扫码登录（公众号发送消息）"></a>微信扫码登录（公众号发送消息）</h2><h3 id="1、需求概述："><a href="#1、需求概述：" class="headerlink" title="1、需求概述："></a>1、需求概述：</h3><p>pc提供微信扫码登录功能，用户在关注了公众号并且完成注册的前提下，可以通过微信扫描电脑端二维码登录。</p><h3 id="2、简单分析"><a href="#2、简单分析" class="headerlink" title="2、简单分析"></a>2、简单分析</h3><p>实现微信扫描登录主要有三种方式：</p><p>1.通过微信公众平台生成带参数的二维</p><p>2.通过微信公众平台微信网页授权登录</p><p>3.通过微信开发平台微信登录功能</p><p>本次我们通过第一种，微信场景二维码的方式实现。交互逻辑：</p><p>a.客户端调用服务端生成二维码接口，并开启轮询服务端扫码结果接口</p><p>b.服务端调用微信获取场景二维码接口，并返回给客户端</p><p>c.用户微信扫码，微信带着用户的openid推送事件到我们的服务端。</p><p>d.服务端根据openid开展自己的业务，把扫码登录结果写入缓存中。</p><p>e.客户端根据轮询的结果跳转登录成功或其他业务场景。</p><h3 id="3、技术点："><a href="#3、技术点：" class="headerlink" title="3、技术点："></a>3、技术点：</h3><p>1.二维码生成逻辑</p><p>2.Oauth认证流程</p><p>3.微信事件推送</p><h3 id="4、准备工作："><a href="#4、准备工作：" class="headerlink" title="4、准备工作："></a>4、准备工作：</h3><p>首先访问<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">公众平台测试账号系统</a>，申请一个测试账号，这样我们就可以获得调用微信公众号的所有接口能力,<br>并且获取到接入微信公众平台所需的appID和appsecret。</p><p><img src="/2022/03/25/微信扫码登录（公众号发送消息）/img.png" alt="11"></p><p>接着我们要配置接口配置信息，这是我们提供的一个接口，此接口有两个作用，一个是第一次微信验证开发者的时候，微信会发送一个get请求请求我们这个接口，另一个用处是<br>后面所有公众号允许的事件推送都是通过post请求到我们这个接口上，然后我们做自己的业务逻辑。</p><p>1.get请求校验微信发送的签名信息，成为开发者（第一次配置接口配置信息的时候调用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/validateWechat&quot;)</span><br><span class="line">@ApiOperation(value = &quot;验证签名&quot;)</span><br><span class="line">public void validateWechat() throws Exception &#123;</span><br><span class="line">    authService.validateWechat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void validateWechat() throws Exception&#123;</span><br><span class="line">    HttpServletRequest request = RequestUtil.getRequest();</span><br><span class="line">    HttpServletResponse response = RequestUtil.getResponse();</span><br><span class="line">    log.info(&quot;微信在配置服务器传递验证参数&quot;);</span><br><span class="line">    String signature = request.getParameter(&quot;signature&quot;);</span><br><span class="line">    String echostr = request.getParameter(&quot;echostr&quot;);</span><br><span class="line">    String timestamp = request.getParameter(&quot;timestamp&quot;);</span><br><span class="line">    String nonce = request.getParameter(&quot;nonce&quot;);</span><br><span class="line">    String token = wiseduProperties.getWechat().getToken();</span><br><span class="line">    log.info(&quot;signature:&#123;&#125;, echostr:&#123;&#125;,timestamp:&#123;&#125;,nonce:&#123;&#125;&quot;, signature, echostr, timestamp, nonce);</span><br><span class="line">    log.info(&quot;本地配置token:&#123;&#125;&quot;, token);</span><br><span class="line">    String buildSign = WeChatUtils.getSignature(token, timestamp, nonce);</span><br><span class="line"></span><br><span class="line">    log.info(&quot;服务器生成签名信息:&#123;&#125;&quot;, buildSign);</span><br><span class="line"></span><br><span class="line">    if (buildSign.equals(signature) &amp;&amp; echostr != null) &#123;</span><br><span class="line">        log.info(&quot;是开发者校验，返回的echostr:&#123;&#125;&quot;, echostr);</span><br><span class="line">        log.info(&quot;服务生成签名与微信服务器生成签名相等，验证成功&quot;);</span><br><span class="line">        response.getWriter().write(echostr);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是微信会根据你配置的token加密生成签名echostr，请求你这个配置的接口，你根据你配置的token按照微信的加密规则加密后对比，一致的话，原样返回echostr给微信，至此开发者校验成功</p><p>1.post请求推送事件给你（订阅、取关、扫描场景二维码、用户发送消息、点击自定义菜单等等，都会通过此接口通知你）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/validateWechat&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br><span class="line">@ApiOperation(value = &quot;微信扫码回调&quot;)</span><br><span class="line">public String wechatMessageListener() throws Exception &#123;</span><br><span class="line">    return authService.wechatMessageListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String wechatMessageListener() throws Exception &#123;</span><br><span class="line">    log.info(&quot;是事件推送回调&quot;);</span><br><span class="line">    HttpServletRequest request = RequestUtil.getRequest();</span><br><span class="line">    String rquestBody = WeChatUtils.inputStream2String(request.getInputStream(), &quot;UTF-8&quot;);</span><br><span class="line">    log.info(&quot;获取到微信推送消息正文:&#123;&#125;&quot;, rquestBody);</span><br><span class="line">    try &#123;</span><br><span class="line">        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">        dbf.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);</span><br><span class="line">        dbf.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);</span><br><span class="line">        dbf.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);</span><br><span class="line">        dbf.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);</span><br><span class="line">        dbf.setXIncludeAware(false);</span><br><span class="line">        dbf.setExpandEntityReferences(false);</span><br><span class="line">        DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">        StringReader sr = new StringReader(rquestBody);</span><br><span class="line">        InputSource is = new InputSource(sr);</span><br><span class="line">        Document document = db.parse(is);</span><br><span class="line">        Element root = document.getDocumentElement();</span><br><span class="line">        NodeList fromUserName = document.getElementsByTagName(&quot;FromUserName&quot;);</span><br><span class="line">        String openId = fromUserName.item(0).getTextContent();</span><br><span class="line">        log.info(&quot;获取到扫码用户openid:&#123;&#125;&quot;, openId);</span><br><span class="line">        NodeList msgType = root.getElementsByTagName(&quot;MsgType&quot;);</span><br><span class="line">        String msgTypeStr = msgType.item(0).getTextContent();</span><br><span class="line">        if (&quot;event&quot;.equals(msgTypeStr)) &#123;</span><br><span class="line">            NodeList event = root.getElementsByTagName(&quot;Event&quot;);</span><br><span class="line">            String eventStr = event.item(0).getTextContent();</span><br><span class="line">            log.info(&quot;获取到event类型:&#123;&#125;&quot;, eventStr);</span><br><span class="line">            NodeList toUserName = root.getElementsByTagName(&quot;ToUserName&quot;);</span><br><span class="line">            String toUserNameStr = toUserName.item(0).getTextContent();</span><br><span class="line">            // 场景二维码</span><br><span class="line">            if (&quot;SCAN&quot;.equals(eventStr)) &#123;</span><br><span class="line">                NodeList eventKey = root.getElementsByTagName(&quot;EventKey&quot;);</span><br><span class="line">                String eventKeyStr = eventKey.item(0).getTextContent();</span><br><span class="line">                log.info(&quot;获取到扫码场景值:&#123;&#125;&quot;, eventKeyStr);</span><br><span class="line">                if (StringUtils.isNotBlank(eventKeyStr)) &#123;</span><br><span class="line">                    return scanLogin(openId, eventKeyStr, toUserNameStr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 订阅</span><br><span class="line">            if (&quot;subscribe&quot;.equals(eventStr)) &#123;</span><br><span class="line">                return sendMessage(openId, WELCOME_TEXT.replaceAll(&quot;&lt;br&gt;&quot;, &quot;\n&quot;), toUserNameStr);</span><br><span class="line">            &#125;</span><br><span class="line">            // 注册菜单点击</span><br><span class="line">            if (&quot;VIEW&quot;.equals(eventStr)) &#123;</span><br><span class="line">                NodeList eventKey = root.getElementsByTagName(&quot;EventKey&quot;);</span><br><span class="line">                String eventKeyStr = eventKey.item(0).getTextContent();</span><br><span class="line">                log.info(&quot;获取到设置的跳转URL:&#123;&#125;&quot;, eventKeyStr);</span><br><span class="line">                if (StringUtils.contains(eventKeyStr, &quot;open.weixin.qq.com&quot;)) &#123;</span><br><span class="line">                    log.info(&quot;点击了注册菜单&quot;);</span><br><span class="line">                    return sendMessage(openId, REGISTER_TEXT.replaceAll(&quot;&lt;br&gt;&quot;, &quot;\n&quot;), toUserNameStr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (&quot;text&quot;.equals(msgTypeStr)) &#123;</span><br><span class="line">            NodeList content = root.getElementsByTagName(&quot;Content&quot;);</span><br><span class="line">            String contentStr = content.item(0).getTextContent();</span><br><span class="line">            log.info(&quot;用户发送信息:&#123;&#125;&quot;, contentStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        log.error(&quot;微信调用服务后台出现错误&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(&quot;事件推送返回了success&quot;);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意配置的这个接口会有两个用处，区别一个是get请求，一个是post请求，建议分开写。本次用到的微信扫码登录功能就是利用第二种事件回调。</p><h3 id="5、代码实现："><a href="#5、代码实现：" class="headerlink" title="5、代码实现："></a>5、代码实现：</h3><p>前端生成一个uuid作为key，请求后台生成二维码接口，并开启轮询，查询扫码结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">// 获取微信登录二维码</span><br><span class="line">getWechatLoginQrCode() &#123;</span><br><span class="line">  this.scanSuccess = false;</span><br><span class="line">  this.uuid = this.generateUUID();</span><br><span class="line">  const url =</span><br><span class="line">    &apos;******?key=&apos; +</span><br><span class="line">    this.uuid;</span><br><span class="line">  this.wxLoginUrl = url;</span><br><span class="line">  this.invalidFlag = false;</span><br><span class="line">  this.wxTimer = setInterval(() =&gt; &#123;</span><br><span class="line">    this.checkWechatScan();</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;,</span><br><span class="line">async checkWechatScan() &#123;</span><br><span class="line">  const res = await this.LOGIN_SERVER[&apos;checkWechatScan&apos;](</span><br><span class="line">    &#123;</span><br><span class="line">      key: this.uuid,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      transformRequest: [</span><br><span class="line">        function (data) &#123;</span><br><span class="line">          let ret = &apos;&apos;;</span><br><span class="line">          for (let it in data) &#123;</span><br><span class="line">            ret +=</span><br><span class="line">              encodeURIComponent(it) +</span><br><span class="line">              &apos;=&apos; +</span><br><span class="line">              encodeURIComponent(data[it]) +</span><br><span class="line">              &apos;&amp;&apos;;</span><br><span class="line">          &#125;</span><br><span class="line">          return ret;</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      headers: &#123;</span><br><span class="line">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  if (res.code === this.CodeControl[&apos;SUCCESS_CODE&apos;]) &#123;</span><br><span class="line">    if (res.result.code === this.CodeControl[&apos;SCAN_SUCCESS&apos;]) &#123;</span><br><span class="line">      // 扫码登录成功</span><br><span class="line">      this.firstScan = false;</span><br><span class="line">      clearInterval(this.wxTimer);</span><br><span class="line">      this.wxTimer = null;</span><br><span class="line">      this.invalidFlag = false;</span><br><span class="line">      this.scanSuccess = true;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.$router.push(&#123; path: &apos;/&apos; &#125;);</span><br><span class="line">      &#125;, 3000);</span><br><span class="line">    &#125; else if (res.result.code === this.CodeControl[&apos;SCAN_BIND&apos;]) &#123;</span><br><span class="line">      // 扫码登录失败 注册 / 绑定账户</span><br><span class="line">      this.firstScan = false;</span><br><span class="line">      clearInterval(this.wxTimer);</span><br><span class="line">      this.wxTimer = null;</span><br><span class="line">      this.btnRegister(&apos;follow&apos;);</span><br><span class="line">      this.openId = res.result.openId;</span><br><span class="line">      this.showBindFlag = true; // 显示可以绑定账号</span><br><span class="line">    &#125; else if (res.result.code === this.CodeControl[&apos;SCAN_WAITING&apos;]) &#123;</span><br><span class="line">      // 等待扫码中</span><br><span class="line">      this.invalidFlag = false;</span><br><span class="line">      this.firstScan = false;</span><br><span class="line">      // this.scanSuccess = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      if (this.firstScan) &#123;</span><br><span class="line">        clearInterval(this.wxTimer);</span><br><span class="line">        this.wxTimer = null;</span><br><span class="line">        this.getWechatLoginQrCode();</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      this.invalidFlag = true;</span><br><span class="line">      this.scanSuccess = false;</span><br><span class="line">      clearInterval(this.wxTimer);</span><br><span class="line">      this.wxTimer = null;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>后端调用微信生成带参数的场景二维码，主要分成三步。</p><p>1.调用接口获取accesstoken，放到缓存中</p><p>2.调用微信获取ticket票据</p><p>3.调用微信获取二维码接口，返回客户端（具体流程参照<a href="https://developers.weixin.qq.com/doc/offiaccount/Account_Management/Generating_a_Parametric_QR_Code.html" target="_blank" rel="noopener">微信公众平台文档</a>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value = &quot;/getWechatLoginQrCode&quot;)</span><br><span class="line">@ApiOperation(value = &quot;获取微信登录二维码&quot;)</span><br><span class="line">public void getWechatLoginQrcode(@RequestParam String key) &#123;</span><br><span class="line">    authService.getWechatLoginQrCode(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object getWechatLoginQrCode(String key) &#123;</span><br><span class="line">    // 获取access_token</span><br><span class="line">    String accessToken = &quot;&quot;;</span><br><span class="line">    Object wechatToken = redisTemplate.opsForValue().get(BusinessConstant.Auth.SECURITY_WECHAT_TOKEN);</span><br><span class="line">    if (wechatToken == null) &#123;</span><br><span class="line">        // 调用微信获取token接口</span><br><span class="line">        Map&lt;String, Object&gt; result = WeChatUtils.getAccessToken(wiseduProperties.getWechat().getAppId(), wiseduProperties.getWechat().getAppSecret());</span><br><span class="line">        accessToken = MapUtil.getStr(result, &quot;accessToken&quot;);</span><br><span class="line">        if (StringUtils.isBlank(accessToken)) &#123;</span><br><span class="line">            throw new BusinessException(ErrorCodeEnum.AUTH20000005);</span><br><span class="line">        &#125;</span><br><span class="line">        redisTemplate.opsForValue().set(BusinessConstant.Auth.SECURITY_WECHAT_TOKEN, accessToken, MapUtil.getLong(result, &quot;expiresIn&quot;), TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        accessToken = wechatToken.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取二维码需要的票据TICKET</span><br><span class="line">    String ticket = WeChatUtils.getQrCodeTiket(accessToken, key);</span><br><span class="line">    if (StringUtils.isBlank(ticket)) &#123;</span><br><span class="line">        throw new BusinessException(ErrorCodeEnum.AUTH20000005);</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取二维码</span><br><span class="line">    WeChatUtils.getQrCodeStream(ticket);</span><br><span class="line">    // key丢到缓存中，用于存储扫码用户信息或openid</span><br><span class="line">    WechatScanResult result = new WechatScanResult();</span><br><span class="line">    result.setCode(Constants.SCAN_WAITING);</span><br><span class="line">    redisTemplate.opsForValue().set(BusinessConstant.Auth.SECURITY_WECHAT_SCAN + key, JSONUtil.writeValueAsString(result), 60000, TimeUnit.MILLISECONDS);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端请求的key丢到缓存中，用于存储扫码用户信息或openid，前端轮询校验扫码结果的接口就是根据key去缓存中查询用户扫码结果。事件推送回调里面业务处理的时候，把扫码结果根据key写到缓存中。</p><p>生成如下扫码登录的二维码：</p><p><img src="/2022/03/25/微信扫码登录（公众号发送消息）/img_1.png" alt="12"></p><p>用户扫码后微信回调我们配置的接口，会把场景key和用户openid传过来，根据openid查询我们的用户信息表，查询到就登录，查询不到就提示注册或者绑定账户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 微信扫码登录</span><br><span class="line"> *</span><br><span class="line"> * @param openId</span><br><span class="line"> * @param eventKey</span><br><span class="line"> * @param toUserName</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private String scanLogin(String openId, String eventKey, String toUserName) &#123;</span><br><span class="line">    WxServiceMsgDto response = new WxServiceMsgDto();</span><br><span class="line">    response.setToUserName(openId);</span><br><span class="line">    response.setFromUserName(toUserName);</span><br><span class="line">    response.setCreateTime(System.currentTimeMillis());</span><br><span class="line">    response.setMsgType(&quot;text&quot;);</span><br><span class="line">    String content = &quot;&quot;;</span><br><span class="line">    // 缓存中拿出用户信息</span><br><span class="line">    if (redisTemplate.hasKey(BusinessConstant.Auth.SECURITY_WECHAT_SCAN + eventKey)) &#123;</span><br><span class="line">        WechatScanResult result = new WechatScanResult();</span><br><span class="line">        // 校验openId用户是否存在</span><br><span class="line">        User user = userService.getOne(Wrappers.lambdaQuery(User.class).eq(User::getOpenId, openId));</span><br><span class="line">        // 不存在进入绑定页面</span><br><span class="line">        result.setOpenId(openId);</span><br><span class="line">        if (null == user) &#123;</span><br><span class="line">            result.setCode(Constants.SCAN_BIND_ACCOUNT);</span><br><span class="line">            content = &quot;请注册，如已注册请在电脑端绑定账号&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 存在则进入登录成功页面</span><br><span class="line">            result.setCode(Constants.SCAN_SUCCESS);</span><br><span class="line">            content = &quot;登录成功&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        redisTemplate.opsForValue().set(BusinessConstant.Auth.SECURITY_WECHAT_SCAN + eventKey,</span><br><span class="line">                JSONUtil.writeValueAsString(result), 60000, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    response.setContent(content);</span><br><span class="line">    String result = WeChatUtils.messageToXml(response);</span><br><span class="line">    log.info(&quot;事件推送的回复:&#123;&#125;&quot;, result);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边接收到微信事件推送的时候，我们会根据扫码结果，给用户发送消息，提示用户登录成功还是其他情况。发送消息接口参照微信公众号文档定义的接口，返回xml格式的报文。<br>我们定义了一个实体，用于组装报文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * 微信消息通知报文</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author jqhe</span><br><span class="line"> * @since 2022/3/22</span><br><span class="line"> */</span><br><span class="line">@XmlRootElement(name = &quot;xml&quot;)</span><br><span class="line">@XmlAccessorType(XmlAccessType.FIELD)</span><br><span class="line">@Data</span><br><span class="line">public class WxServiceMsgDto &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 事件类型，subscribe(订阅)、unsubscribe(取消订阅)</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name = &quot;Event&quot;)</span><br><span class="line">    private String Event;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 事件KEY值，qrscene_为前缀，后面为二维码的参数值</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name = &quot;EventKey&quot;)</span><br><span class="line">    private String EventKey;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 文本消息内容</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name = &quot;Content&quot;)</span><br><span class="line">    private String Content;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 消息类型，(text,event)</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name = &quot;MsgType&quot;)</span><br><span class="line">    private String MsgType;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 开发者微信号</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name = &quot;ToUserName&quot;)</span><br><span class="line">    private String ToUserName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * fromUserName为关注人的openId</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name = &quot;FromUserName&quot;)</span><br><span class="line">    private String FromUserName;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 消息创建时间 （整型）</span><br><span class="line">     */</span><br><span class="line">    @XmlElement(name=&quot;CreateTime&quot;)</span><br><span class="line">    private Long CreateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现以下效果</p><p><img src="/2022/03/25/微信扫码登录（公众号发送消息）/img_2.png" alt="13"></p><p>至此，微信扫码登录功能就实现拉！</p><h3 id="6、踩坑记："><a href="#6、踩坑记：" class="headerlink" title="6、踩坑记："></a>6、踩坑记：</h3><p>1.该公众号提供的服务出现故障,请稍后再试 </p><p><img src="/2022/03/25/微信扫码登录（公众号发送消息）/img_3.png" alt="14"></p><p>微信公众号事件推送，调用我们的回调函数的时候，啥也不处理，根据文档响应success或者空串的时候，公众号报错”该公众号提供的服务出现故障,请稍后再试”</p><p>注意看文档，检查我们接口返回的success是否带引号？一般带引号是springmvc配置返回json的时候引起的，WebMvcConfigurer类修改如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    @Bean</span><br><span class="line">    public StringHttpMessageConverter stringHttpMessageConverter() &#123;</span><br><span class="line">        return new StringHttpMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter();</span><br><span class="line">        SimpleModule simpleModule = new SimpleModule();</span><br><span class="line">//simpleModule.addSerializer(Long.class, ToStringSerializer.instance);</span><br><span class="line">//simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper()</span><br><span class="line">                .registerModule(new ParameterNamesModule())</span><br><span class="line">                .registerModule(new Jdk8Module())</span><br><span class="line">                .registerModule(new JavaTimeModule())</span><br><span class="line">                .registerModule(simpleModule);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);</span><br><span class="line">        jackson2HttpMessageConverter.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        converters.add(jackson2HttpMessageConverter);</span><br><span class="line"></span><br><span class="line">        //字符串转换器</span><br><span class="line">        List&lt;MediaType&gt; listString = new ArrayList&lt;MediaType&gt;();</span><br><span class="line">        //字符串的消息类型为text/plain</span><br><span class="line">        listString.add(MediaType.TEXT_PLAIN);</span><br><span class="line">        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();</span><br><span class="line">        stringHttpMessageConverter.setSupportedMediaTypes(listString);</span><br><span class="line">        converters.add(stringHttpMessageConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>回调函数定义的地方：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/validateWechat&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br></pre></td></tr></table></figure><p>记得加utf-8的编码格式，不然回复中文会乱码。</p>]]></content>
      
      
      <categories>
          
          <category> wechat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
